/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 20 10:31:22 GMT 2020
 */

package model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import model.Car;
import model.Client;
import model.Owner;
import model.Rental;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import utils.Point;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Owner_ESTest extends Owner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Owner owner0 = new Owner("", "", "", 0, (String) null);
      owner0.refuse((Rental) null);
      assertEquals(100, owner0.getRates());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Owner owner0 = new Owner("%3K/sFJ;_FY;Namnr}", "eQ", "", 0, "");
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double(0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("@?8xf", owner0, car_CarType0, 0, 0, 0, 0, point0, "model.Owner");
      Client client0 = new Client(point0, "model.User", " djWN{kb\"TlG?=,j", "model.Owner", "GCMft\"=PN6?9#HM:G5", 0);
      Rental rental0 = new Rental(car0, client0, point0);
      car0.pendingRental(rental0);
      List<Rental> list0 = owner0.getPending();
      assertTrue(list0.contains(rental0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Owner owner0 = new Owner("", ".\"b5/elo,jq2a)", ".\"b5/elo,jq2a)", 0, "");
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Double double0 = new Double(0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car((String) null, owner0, car_CarType0, 0, 2394.8358836, 0.15, 0, point0, "");
      owner0.addCar(car0);
      List<Car> list0 = owner0.getCars();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Owner owner0 = new Owner("0BW(7B.Mo0", "{qmd|\"h2v8IAxH", "{qmd|\"h2v8IAxH", 0, "0BW(7B.Mo0");
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double(0.5);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("\n\n", owner0, car_CarType0, 0, (-2065.3), 0.5, 0, point0, "{qmd|\"h2v8IAxH");
      car0.rate(908, 0);
      Owner owner1 = owner0.clone();
      assertNotSame(owner1, owner0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Owner owner0 = new Owner("model.Owner", "1", "AYoW9)%mB@EgnIR=", 1662, "model.Owner");
      owner0.rate((-1522788922));
      Owner owner1 = owner0.clone();
      assertNotSame(owner1, owner0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Owner owner0 = new Owner("", "", "", (-1867), "");
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Double double0 = new Double(0.6);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, (-1867), (-1867), (-1867), (-1867), point0, "");
      Client client0 = new Client(point0, "80`C", "", "\u001B[31m", "", (-1867));
      Rental rental0 = new Rental(car0, client0, point0);
      owner0.addPendingRental(rental0);
      Rental rental1 = new Rental(car0, (Client) null, point0);
      // Undeclared exception!
      try { 
        owner0.refuse(rental1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Rental", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Owner owner0 = new Owner("J<zBy>BX[huYAKP", "J<zBy>BX[huYAKP", "O carro necessita de ser abastecido\n", (-1), "O carro necessita de ser abastecido\n");
      // Undeclared exception!
      try { 
        owner0.rate((Rental) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Owner", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Owner owner0 = new Owner("k", (String) null, "model.Owner", 952, "FeaFO2.i,");
      Owner owner1 = owner0.clone();
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double(952);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("3&d", owner0, car_CarType0, 952, 0.0, 264.0, 952, point0, (String) null);
      Rental rental0 = new Rental(car0, (Client) null, point0);
      owner0.accept(rental0);
      Client client0 = new Client(point0, "model.Owner", "model.Owner", "$VALUES", (String) null, 1434);
      Rental rental1 = new Rental(car0, client0, point0);
      owner1.accept(rental1);
      // Undeclared exception!
      try { 
        owner0.equals(owner1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Rental", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Owner owner0 = new Owner("k", (String) null, "model.Owner", 952, "FeaFO2.i,");
      List<Car> list0 = owner0.getCars();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Owner owner0 = new Owner("", "", "", (-2122), "");
      Owner owner1 = owner0.clone();
      assertTrue(owner1.equals((Object)owner0));
      
      owner1.accept((Rental) null);
      boolean boolean0 = owner0.equals(owner1);
      assertFalse(owner1.equals((Object)owner0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Owner owner0 = new Owner("x3tKKssJ;_FY]Namnr}", "x3tKKssJ;_FY]Namnr}", "x3tKKssJ;_FY]Namnr}", 411, "x3tKKssJ;_FY]Namnr}");
      Owner owner1 = owner0.clone();
      assertTrue(owner1.equals((Object)owner0));
      
      owner1.addPendingRental((Rental) null);
      boolean boolean0 = owner0.equals(owner1);
      assertFalse(owner1.equals((Object)owner0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Owner owner0 = new Owner("x3tKKssJ;_FY]Namnr}", "x3tKKssJ;_FY]Namnr}", "x3tKKssJ;_FY]Namnr}", 411, "x3tKKssJ;_FY]Namnr}");
      Owner owner1 = owner0.clone();
      boolean boolean0 = owner0.equals(owner1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Owner owner0 = new Owner("T+gI5", "T+gI5", "T+gI5", (-1811812827), "T+gI5");
      boolean boolean0 = owner0.equals("T+gI5");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Owner owner0 = new Owner("", "", "", 0, (String) null);
      boolean boolean0 = owner0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Owner owner0 = new Owner("k", (String) null, "model.Owner", 952, "FeaFO2.i,");
      boolean boolean0 = owner0.equals(owner0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Owner owner0 = new Owner("", "F,5[P/UxKNm[Pb~lg", "O carro necessita de ser abastecido\n", 0, "O carro necessita de ser abastecido\n");
      Owner owner1 = owner0.clone();
      assertTrue(owner1.equals((Object)owner0));
      
      owner1.addCar((Car) null);
      boolean boolean0 = owner1.equals(owner0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Owner owner0 = new Owner("molel.Owner", "molel.Owner", "molel.Owner", 1621, "molel.Owner");
      owner0.hashCode();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Owner owner0 = new Owner("%3K/sFJ;_FY;Namnr}", "eQ", "", 0, "");
      List<Rental> list0 = owner0.getPending();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Owner owner0 = new Owner("Custo Total: ", ";SF", "u:D]xbiOsR", 0, "");
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Double double0 = new Double(2.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car((String) null, owner0, car_CarType0, 0, 2.0, 0.0, (-2061), point0, "fU*K9g?B");
      Rental rental0 = new Rental(car0, (Client) null, point0);
      owner0.addPendingRental(rental0);
      // Undeclared exception!
      try { 
        owner0.accept((Rental) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Owner", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Owner owner0 = new Owner("", "F,5[P/UxKNm[Pb~lg", "O carro necessita de ser abastecido\n", 0, "O carro necessita de ser abastecido\n");
      Car.CarType car_CarType0 = Car.CarType.GAS;
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car(",I3fHWPw", owner0, car_CarType0, 0.0, 0.0, 446.791645204, 864, point0, "$oiBh#}GQRC<;br0");
      Client client0 = new Client(point0, "\n\n", "$oiBh#}GQRC<;br0", "", "$oiBh#}GQRC<;br0", (-1));
      Rental rental0 = new Rental(car0, client0, point0);
      owner0.rate(rental0, (-57));
      assertEquals((-57), client0.getRates());
  }
}
